#BlueJ class context
comment0.target=StdDraw
comment0.text=\r\n\ \ The\ {@code\ StdDraw}\ class\ provides\ a\ basic\ capability\ for\r\n\ \ creating\ drawings\ with\ your\ programs.\ It\ uses\ a\ simple\ graphics\ model\ that\r\n\ \ allows\ you\ to\ create\ drawings\ consisting\ of\ points,\ lines,\ squares,\ \r\n\ \ circles,\ and\ other\ geometric\ shapes\ in\ a\ window\ on\ your\ computer\ and\r\n\ \ to\ save\ the\ drawings\ to\ a\ file.\ Standard\ drawing\ also\ includes\r\n\ \ facilities\ for\ text,\ color,\ pictures,\ and\ animation,\ along\ with\r\n\ \ user\ interaction\ via\ the\ keyboard\ and\ mouse.\r\n\ \ <p>\r\n\ \ <b>Getting\ started.</b>\r\n\ \ To\ use\ this\ class,\ you\ must\ have\ {@code\ StdDraw.class}\ in\ your\r\n\ \ Java\ classpath.\ If\ you\ used\ our\ autoinstaller,\ you\ should\ be\ all\ set.\r\n\ \ Otherwise,\ either\ download\r\n\ \ <a\ href\ \=\ "https\://introcs.cs.princeton.edu/java/code/stdlib.jar">stdlib.jar</a>\r\n\ \ and\ add\ to\ your\ Java\ classpath\ or\ download\r\n\ \ <a\ href\ \=\ "https\://introcs.cs.princeton.edu/java/stdlib/StdDraw.java">StdDraw.java</a>\r\n\ \ and\ put\ a\ copy\ in\ your\ working\ directory.\r\n\ \ <p>\r\n\ \ Now,\ type\ the\ following\ short\ program\ into\ your\ editor\:\r\n\ \ <pre>\r\n\ \ \ public\ class\ TestStdDraw\ {\r\n\ \ \ \ \ \ \ public\ static\ void\ main(String[]\ args)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ StdDraw.setPenRadius(0.05);\r\n\ \ \ \ \ \ \ \ \ \ \ StdDraw.setPenColor(StdDraw.BLUE);\r\n\ \ \ \ \ \ \ \ \ \ \ StdDraw.point(0.5,\ 0.5);\r\n\ \ \ \ \ \ \ \ \ \ \ StdDraw.setPenColor(StdDraw.MAGENTA);\r\n\ \ \ \ \ \ \ \ \ \ \ StdDraw.line(0.2,\ 0.2,\ 0.8,\ 0.2);\r\n\ \ \ \ \ \ \ }\r\n\ \ \ }\r\n\ \ </pre>\r\n\ \ If\ you\ compile\ and\ execute\ the\ program,\ you\ should\ see\ a\ window\r\n\ \ appear\ with\ a\ thick\ magenta\ line\ and\ a\ blue\ point.\r\n\ \ This\ program\ illustrates\ the\ two\ main\ types\ of\ methods\ in\ standard\r\n\ \ drawing?\uE6ECethods\ that\ draw\ geometric\ shapes\ and\ methods\ that\r\n\ \ control\ drawing\ parameters.\r\n\ \ The\ methods\ {@code\ StdDraw.line()}\ and\ {@code\ StdDraw.point()}\r\n\ \ draw\ lines\ and\ points;\ the\ methods\ {@code\ StdDraw.setPenRadius()}\r\n\ \ and\ {@code\ StdDraw.setPenColor()}\ control\ the\ line\ thickness\ and\ color.\r\n\ \ <p>\r\n\ \ <b>Points\ and\ lines.</b>\r\n\ \ You\ can\ draw\ points\ and\ line\ segments\ with\ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#point(double\ x,\ double\ y)}\r\n\ \ <li>\ {@link\ \#line(double\ x1,\ double\ y1,\ double\ x2,\ double\ y2)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ <em>x</em>-\ and\ <em>y</em>-coordinates\ must\ be\ in\ the\ drawing\ area\r\n\ \ (between\ 0\ and\ 1\ and\ by\ default)\ or\ the\ points\ and\ lines\ will\ not\ be\ visible.\r\n\ \ <p>\r\n\ \ <b>Squares,\ circles,\ rectangles,\ and\ ellipses.</b>\r\n\ \ You\ can\ draw\ squares,\ circles,\ rectangles,\ and\ ellipses\ using\r\n\ \ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#circle(double\ x,\ double\ y,\ double\ radius)}\r\n\ \ <li>\ {@link\ \#ellipse(double\ x,\ double\ y,\ double\ semiMajorAxis,\ double\ semiMinorAxis)}\r\n\ \ <li>\ {@link\ \#square(double\ x,\ double\ y,\ double\ radius)}\r\n\ \ <li>\ {@link\ \#rectangle(double\ x,\ double\ y,\ double\ halfWidth,\ double\ halfHeight)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ All\ of\ these\ methods\ take\ as\ arguments\ the\ location\ and\ size\ of\ the\ shape.\r\n\ \ The\ location\ is\ always\ specified\ by\ the\ <em>x</em>-\ and\ <em>y</em>-coordinates\r\n\ \ of\ its\ <em>center</em>.\r\n\ \ The\ size\ of\ a\ circle\ is\ specified\ by\ its\ radius\ and\ the\ size\ of\ an\ ellipse\ is\r\n\ \ specified\ by\ the\ lengths\ of\ its\ semi-major\ and\ semi-minor\ axes.\r\n\ \ The\ size\ of\ a\ square\ or\ rectangle\ is\ specified\ by\ its\ half-width\ or\ half-height.\r\n\ \ The\ convention\ for\ drawing\ squares\ and\ rectangles\ is\ parallel\ to\ those\ for\r\n\ \ drawing\ circles\ and\ ellipses,\ but\ may\ be\ unexpected\ to\ the\ uninitiated.\r\n\ \ <p>\r\n\ \ The\ methods\ above\ trace\ outlines\ of\ the\ given\ shapes.\ The\ following\ methods\r\n\ \ draw\ filled\ versions\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#filledCircle(double\ x,\ double\ y,\ double\ radius)}\r\n\ \ <li>\ {@link\ \#filledEllipse(double\ x,\ double\ y,\ double\ semiMajorAxis,\ double\ semiMinorAxis)}\r\n\ \ <li>\ {@link\ \#filledSquare(double\ x,\ double\ y,\ double\ radius)}\r\n\ \ <li>\ {@link\ \#filledRectangle(double\ x,\ double\ y,\ double\ halfWidth,\ double\ halfHeight)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ <b>Circular\ arcs.</b>\r\n\ \ You\ can\ draw\ circular\ arcs\ with\ the\ following\ method\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#arc(double\ x,\ double\ y,\ double\ radius,\ double\ angle1,\ double\ angle2)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ arc\ is\ from\ the\ circle\ centered\ at\ (<em>x</em>,\ <em>y</em>)\ of\ the\ specified\ radius.\r\n\ \ The\ arc\ extends\ from\ angle1\ to\ angle2.\ By\ convention,\ the\ angles\ are\r\n\ \ <em>polar</em>\ (counterclockwise\ angle\ from\ the\ <em>x</em>-axis)\r\n\ \ and\ represented\ in\ degrees.\ For\ example,\ {@code\ StdDraw.arc(0.0,\ 0.0,\ 1.0,\ 0,\ 90)}\r\n\ \ draws\ the\ arc\ of\ the\ unit\ circle\ from\ 3\ o'clock\ (0\ degrees)\ to\ 12\ o'clock\ (90\ degrees).\r\n\ \ <p>\r\n\ \ <b>Polygons.</b>\r\n\ \ You\ can\ draw\ polygons\ with\ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#polygon(double[]\ x,\ double[]\ y)}\r\n\ \ <li>\ {@link\ \#filledPolygon(double[]\ x,\ double[]\ y)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ points\ in\ the\ polygon\ are\ ({@code\ x[i]},\ {@code\ y[i]}).\r\n\ \ For\ example,\ the\ following\ code\ fragment\ draws\ a\ filled\ diamond\r\n\ \ with\ vertices\ (0.1,\ 0.2),\ (0.2,\ 0.3),\ (0.3,\ 0.2),\ and\ (0.2,\ 0.1)\:\r\n\ \ <pre>\r\n\ \ \ double[]\ x\ \=\ {\ 0.1,\ 0.2,\ 0.3,\ 0.2\ };\r\n\ \ \ double[]\ y\ \=\ {\ 0.2,\ 0.3,\ 0.2,\ 0.1\ };\r\n\ \ \ StdDraw.filledPolygon(x,\ y);\r\n\ \ </pre>\r\n\ \ <p>\r\n\ \ <b>Pen\ size.</b>\r\n\ \ The\ pen\ is\ circular,\ so\ that\ when\ you\ set\ the\ pen\ radius\ to\ <em>r</em>\r\n\ \ and\ draw\ a\ point,\ you\ get\ a\ circle\ of\ radius\ <em>r</em>.\ Also,\ lines\ are\r\n\ \ of\ thickness\ 2<em>r</em>\ and\ have\ rounded\ ends.\ The\ default\ pen\ radius\r\n\ \ is\ 0.005\ and\ is\ not\ affected\ by\ coordinate\ scaling.\ This\ default\ pen\r\n\ \ radius\ is\ about\ 1/200\ the\ width\ of\ the\ default\ canvas,\ so\ that\ if\r\n\ \ you\ draw\ 100\ points\ equally\ spaced\ along\ a\ horizontal\ or\ vertical\ line,\r\n\ \ you\ will\ be\ able\ to\ see\ individual\ circles,\ but\ if\ you\ draw\ 200\ such\r\n\ \ points,\ the\ result\ will\ look\ like\ a\ line.\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setPenRadius(double\ radius)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ For\ example,\ {@code\ StdDraw.setPenRadius(0.025)}\ makes\r\n\ \ the\ thickness\ of\ the\ lines\ and\ the\ size\ of\ the\ points\ to\ be\ five\ times\r\n\ \ the\ 0.005\ default.\r\n\ \ To\ draw\ points\ with\ the\ minimum\ possible\ radius\ (one\ pixel\ on\ typical\r\n\ \ displays),\ set\ the\ pen\ radius\ to\ 0.0.\r\n\ \ <p>\r\n\ \ <b>Pen\ color.</b>\r\n\ \ All\ geometric\ shapes\ (such\ as\ points,\ lines,\ and\ circles)\ are\ drawn\ using\r\n\ \ the\ current\ pen\ color.\ By\ default,\ it\ is\ black.\r\n\ \ You\ can\ change\ the\ pen\ color\ with\ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setPenColor(int\ red,\ int\ green,\ int\ blue)}\r\n\ \ <li>\ {@link\ \#setPenColor(Color\ color)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ method\ allows\ you\ to\ specify\ colors\ using\ the\ RGB\ color\ system.\r\n\ \ This\ <a\ href\ \=\ "http\://johndyer.name/lab/colorpicker/">color\ picker</a>\r\n\ \ is\ a\ convenient\ way\ to\ find\ a\ desired\ color.\r\n\ \ The\ second\ method\ allows\ you\ to\ specify\ colors\ using\ the\r\n\ \ {@link\ Color}\ data\ type\ that\ is\ discussed\ in\ Chapter\ 3.\ Until\ then,\r\n\ \ you\ can\ use\ this\ method\ with\ one\ of\ these\ predefined\ colors\ in\ standard\ drawing\:\r\n\ \ {@link\ \#BLACK},\ {@link\ \#BLUE},\ {@link\ \#CYAN},\ {@link\ \#DARK_GRAY},\ {@link\ \#GRAY},\r\n\ \ {@link\ \#GREEN},\ {@link\ \#LIGHT_GRAY},\ {@link\ \#MAGENTA},\ {@link\ \#ORANGE},\r\n\ \ {@link\ \#PINK},\ {@link\ \#RED},\ {@link\ \#WHITE},\ {@link\ \#YELLOW},\r\n\ \ {@link\ \#BOOK_BLUE},\ {@link\ \#BOOK_LIGHT_BLUE},\ {@link\ \#BOOK_RED},\ and\r\n\ \ {@link\ \#PRINCETON_ORANGE}.\r\n\ \ For\ example,\ {@code\ StdDraw.setPenColor(StdDraw.MAGENTA)}\ sets\ the\r\n\ \ pen\ color\ to\ magenta.\r\n\ \ <p>\r\n\ \ <b>Canvas\ size.</b>\r\n\ \ By\ default,\ all\ drawing\ takes\ places\ in\ a\ 512-by-512\ canvas.\r\n\ \ The\ canvas\ does\ not\ include\ the\ window\ title\ or\ window\ border.\r\n\ \ You\ can\ change\ the\ size\ of\ the\ canvas\ with\ the\ following\ method\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setCanvasSize(int\ width,\ int\ height)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ This\ sets\ the\ canvas\ size\ to\ be\ <em>width</em>-by-<em>height</em>\ pixels.\r\n\ \ It\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\r\n\ \ pen\ radius,\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ \ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\ of\ a\ program.\r\n\ \ For\ example,\ {@code\ StdDraw.setCanvasSize(800,\ 800)}\r\n\ \ sets\ the\ canvas\ size\ to\ be\ 800-by-800\ pixels.\r\n\ \ <p>\r\n\ \ <b>Canvas\ scale\ and\ coordinate\ system.</b>\r\n\ \ By\ default,\ all\ drawing\ takes\ places\ in\ the\ unit\ square,\ with\ (0,\ 0)\ at\r\n\ \ lower\ left\ and\ (1,\ 1)\ at\ upper\ right.\ You\ can\ change\ the\ default\r\n\ \ coordinate\ system\ with\ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setXscale(double\ xmin,\ double\ xmax)}\r\n\ \ <li>\ {@link\ \#setYscale(double\ ymin,\ double\ ymax)}\r\n\ \ <li>\ {@link\ \#setScale(double\ min,\ double\ max)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ arguments\ are\ the\ coordinates\ of\ the\ minimum\ and\ maximum\ \r\n\ \ <em>x</em>-\ or\ <em>y</em>-coordinates\ that\ will\ appear\ in\ the\ canvas.\r\n\ \ For\ example,\ if\ you\ \ wish\ to\ use\ the\ default\ coordinate\ system\ but\r\n\ \ leave\ a\ small\ margin,\ you\ can\ call\ {@code\ StdDraw.setScale(-.05,\ 1.05)}.\r\n\ \ <p>\r\n\ \ These\ methods\ change\ the\ coordinate\ system\ for\ subsequent\ drawing\r\n\ \ commands;\ they\ do\ not\ affect\ previous\ drawings.\r\n\ \ These\ methods\ do\ not\ change\ the\ canvas\ size;\ so,\ if\ the\ <em>x</em>-\r\n\ \ and\ <em>y</em>-scales\ are\ different,\ squares\ will\ become\ rectangles\r\n\ \ and\ circles\ will\ become\ ellipsoidal.\r\n\ \ <p>\r\n\ \ <b>Text.</b>\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ annotate\ your\ drawings\ with\ text\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#text(double\ x,\ double\ y,\ String\ text)}\r\n\ \ <li>\ {@link\ \#text(double\ x,\ double\ y,\ String\ text,\ double\ degrees)}\r\n\ \ <li>\ {@link\ \#textLeft(double\ x,\ double\ y,\ String\ text)}\r\n\ \ <li>\ {@link\ \#textRight(double\ x,\ double\ y,\ String\ text)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ two\ methods\ write\ the\ specified\ text\ in\ the\ current\ font,\r\n\ \ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ \ The\ second\ method\ allows\ you\ to\ rotate\ the\ text.\r\n\ \ The\ last\ two\ methods\ either\ left-\ or\ right-align\ the\ text\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ \ <p>\r\n\ \ The\ default\ font\ is\ a\ Sans\ Serif\ font\ with\ point\ size\ 16.\r\n\ \ You\ can\ use\ the\ following\ method\ to\ change\ the\ font\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setFont(Font\ font)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ You\ use\ the\ {@link\ Font}\ data\ type\ to\ specify\ the\ font.\ This\ allows\ you\ to\r\n\ \ choose\ the\ face,\ size,\ and\ style\ of\ the\ font.\ For\ example,\ the\ following\r\n\ \ code\ fragment\ sets\ the\ font\ to\ Arial\ Bold,\ 60\ point.\r\n\ \ <pre>\r\n\ \ \ Font\ font\ \=\ new\ Font("Arial",\ Font.BOLD,\ 60);\r\n\ \ \ StdDraw.setFont(font);\r\n\ \ \ StdDraw.text(0.5,\ 0.5,\ "Hello,\ World");\r\n\ \ </pre>\r\n\ \ <p>\r\n\ \ <b>Images.</b>\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ add\ images\ to\ your\ drawings\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#picture(double\ x,\ double\ y,\ String\ filename)}\r\n\ \ <li>\ {@link\ \#picture(double\ x,\ double\ y,\ String\ filename,\ double\ degrees)}\r\n\ \ <li>\ {@link\ \#picture(double\ x,\ double\ y,\ String\ filename,\ double\ scaledWidth,\ double\ scaledHeight)}\r\n\ \ <li>\ {@link\ \#picture(double\ x,\ double\ y,\ String\ filename,\ double\ scaledWidth,\ double\ scaledHeight,\ double\ degrees)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ These\ methods\ draw\ the\ specified\ image,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ \ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\ \ The\ image\ will\ display\ at\ its\ native\ size,\ independent\ of\ the\ coordinate\ system.\r\n\ \ Optionally,\ you\ can\ rotate\ the\ image\ a\ specified\ number\ of\ degrees\ counterclockwise\r\n\ \ or\ rescale\ it\ to\ fit\ snugly\ inside\ a\ width-by-height\ bounding\ box.\r\n\ \ <p>\r\n\ \ <b>Saving\ to\ a\ file.</b>\r\n\ \ You\ save\ your\ image\ to\ a\ file\ using\ the\ <em>File\ ???\ Save</em>\ menu\ option.\r\n\ \ You\ can\ also\ save\ a\ file\ programatically\ using\ the\ following\ method\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#save(String\ filename)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ supported\ image\ formats\ are\ JPEG\ and\ PNG.\ The\ filename\ must\ have\ either\ the\r\n\ \ extension\ .jpg\ or\ .png.\r\n\ \ We\ recommend\ using\ PNG\ for\ drawing\ that\ consist\ solely\ of\ geometric\ shapes\ and\ JPEG\ \r\n\ \ for\ drawings\ that\ contains\ pictures.\r\n\ \ <p>\r\n\ \ <b>Clearing\ the\ canvas.</b>\r\n\ \ To\ clear\ the\ entire\ drawing\ canvas,\ you\ can\ use\ the\ following\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#clear()}\r\n\ \ <li>\ {@link\ \#clear(Color\ color)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ method\ clears\ the\ canvas\ to\ white;\ the\ second\ method\r\n\ \ allows\ you\ to\ specify\ a\ color\ of\ your\ choice.\ For\ example,\r\n\ \ {@code\ StdDraw.clear(StdDraw.LIGHT_GRAY)}\ clears\ the\ canvas\ to\ a\ shade\r\n\ \ of\ gray.\r\n\ \ <p>\r\n\ \ <b>Computer\ animations\ and\ double\ buffering.</b>\r\n\ \ Double\ buffering\ is\ one\ of\ the\ most\ powerful\ features\ of\ standard\ drawing,\r\n\ \ enabling\ computer\ animations.\r\n\ \ The\ following\ methods\ control\ the\ way\ in\ which\ objects\ are\ drawn\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#enableDoubleBuffering()}\r\n\ \ <li>\ {@link\ \#disableDoubleBuffering()}\r\n\ \ <li>\ {@link\ \#show()}\r\n\ \ <li>\ {@link\ \#pause(int\ t)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ By\ default,\ double\ buffering\ is\ disabled,\ which\ means\ that\ as\ soon\ as\ you\r\n\ \ call\ a\ drawing\r\n\ \ method?\uE6F2uch\ as\ {@code\ point()}\ or\ {@code\ line()}?\uE6F3he\r\n\ \ results\ appear\ on\ the\ screen.\r\n\ \ <p>\r\n\ \ When\ double\ buffering\ is\ enabled\ by\ calling\ {@link\ \#enableDoubleBuffering()},\r\n\ \ all\ drawing\ takes\ place\ on\ the\ <em>offscreen\ canvas</em>.\ The\ offscreen\ canvas\r\n\ \ is\ not\ displayed.\ Only\ when\ you\ call\r\n\ \ {@link\ \#show()}\ does\ your\ drawing\ get\ copied\ from\ the\ offscreen\ canvas\ to\r\n\ \ the\ onscreen\ canvas,\ where\ it\ is\ displayed\ in\ the\ standard\ drawing\ window.\ You\ \r\n\ \ can\ think\ of\ double\ buffering\ as\ collecting\ all\ of\ the\ lines,\ points,\ shapes,\r\n\ \ and\ text\ that\ you\ tell\ it\ to\ draw,\ and\ then\ drawing\ them\ all\r\n\ \ <em>simultaneously</em>,\ upon\ request.\r\n\ \ <p>\r\n\ \ The\ most\ important\ use\ of\ double\ buffering\ is\ to\ produce\ computer\r\n\ \ animations,\ creating\ the\ illusion\ of\ motion\ by\ rapidly\r\n\ \ displaying\ static\ drawings.\ To\ produce\ an\ animation,\ repeat\r\n\ \ the\ following\ four\ steps\:\r\n\ \ <ul>\r\n\ \ <li>\ Clear\ the\ offscreen\ canvas.\r\n\ \ <li>\ Draw\ objects\ on\ the\ offscreen\ canvas.\r\n\ \ <li>\ Copy\ the\ offscreen\ canvas\ to\ the\ onscreen\ canvas.\r\n\ \ <li>\ Wait\ for\ a\ short\ while.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ {@link\ \#clear()},\ {@link\ \#show()},\ and\ {@link\ \#pause(int\ t)}\ methods\r\n\ \ support\ the\ first,\ third,\ and\ fourth\ of\ these\ steps,\ respectively.\r\n\ \ <p>\r\n\ \ For\ example,\ this\ code\ fragment\ animates\ two\ balls\ moving\ in\ a\ circle.\r\n\ \ <pre>\r\n\ \ \ StdDraw.setScale(-2,\ +2);\r\n\ \ \ StdDraw.enableDoubleBuffering();\r\n\r\n\ \ \ for\ (double\ t\ \=\ 0.0;\ true;\ t\ +\=\ 0.02)\ {\r\n\ \ \ \ \ \ \ double\ x\ \=\ Math.sin(t);\r\n\ \ \ \ \ \ \ double\ y\ \=\ Math.cos(t);\r\n\ \ \ \ \ \ \ StdDraw.clear();\r\n\ \ \ \ \ \ \ StdDraw.filledCircle(x,\ y,\ 0.05);\r\n\ \ \ \ \ \ \ StdDraw.filledCircle(-x,\ -y,\ 0.05);\r\n\ \ \ \ \ \ \ StdDraw.show();\r\n\ \ \ \ \ \ \ StdDraw.pause(20);\r\n\ \ \ }\r\n\ \ </pre>\r\n\ \ <p>\r\n\ \ <b>Keyboard\ and\ mouse\ inputs.</b>\r\n\ \ Standard\ drawing\ has\ very\ basic\ support\ for\ keyboard\ and\ mouse\ input.\r\n\ \ It\ is\ much\ less\ powerful\ than\ most\ user\ interface\ libraries\ provide,\ but\ also\ much\ simpler.\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ intercept\ mouse\ events\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#isMousePressed()}\r\n\ \ <li>\ {@link\ \#mouseX()}\r\n\ \ <li>\ {@link\ \#mouseY()}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ method\ tells\ you\ whether\ a\ mouse\ button\ is\ currently\ being\ pressed.\r\n\ \ The\ last\ two\ methods\ tells\ you\ the\ <em>x</em>-\ and\ <em>y</em>-coordinates\ of\ the\ mouse's\r\n\ \ current\ position,\ using\ the\ same\ coordinate\ system\ as\ the\ canvas\ (the\ unit\ square,\ by\ default).\r\n\ \ You\ should\ use\ these\ methods\ in\ an\ animation\ loop\ that\ waits\ a\ short\ while\ before\ trying\r\n\ \ to\ poll\ the\ mouse\ for\ its\ current\ state.\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ intercept\ keyboard\ events\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#hasNextKeyTyped()}\r\n\ \ <li>\ {@link\ \#nextKeyTyped()}\r\n\ \ <li>\ {@link\ \#isKeyPressed(int\ keycode)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ If\ the\ user\ types\ lots\ of\ keys,\ they\ will\ be\ saved\ in\ a\ list\ until\ you\ process\ them.\r\n\ \ The\ first\ method\ tells\ you\ whether\ the\ user\ has\ typed\ a\ key\ (that\ your\ program\ has\r\n\ \ not\ yet\ processed).\r\n\ \ The\ second\ method\ returns\ the\ next\ key\ that\ the\ user\ typed\ (that\ your\ program\ has\r\n\ \ not\ yet\ processed)\ and\ removes\ it\ from\ the\ list\ of\ saved\ keystrokes.\r\n\ \ The\ third\ method\ tells\ you\ whether\ a\ key\ is\ currently\ being\ pressed.\r\n\ \ <p>\r\n\ \ <b>Accessing\ control\ parameters.</b>\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ access\ the\ current\ pen\ color,\ pen\ radius,\r\n\ \ and\ font\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#getPenColor()}\r\n\ \ <li>\ {@link\ \#getPenRadius()}\r\n\ \ <li>\ {@link\ \#getFont()}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ These\ methods\ are\ useful\ when\ you\ want\ to\ temporarily\ change\ a\r\n\ \ control\ parameter\ and\ reset\ it\ back\ to\ its\ original\ value.\r\n\ \ <p>\r\n\ \ <b>Corner\ cases.</b>\r\n\ \ To\ avoid\ clutter,\ the\ API\ doesn't\ explicitly\ refer\ to\ arguments\ that\ are\r\n\ \ null,\ infinity,\ or\ NaN.\r\n\ \ <ul>\r\n\ \ <li>\ Any\ method\ that\ is\ passed\ a\ {@code\ null}\ argument\ will\ throw\ an\r\n\ \ \ \ \ \ \ {@link\ IllegalArgumentException}.\r\n\ \ <li>\ Except\ as\ noted\ in\ the\ APIs,\ drawing\ an\ object\ outside\ (or\ partly\ outside)\r\n\ \ \ \ \ \ \ the\ canvas\ is\ permitted\uE6E7owever,\ only\ the\ part\ of\ the\ object\ that\r\n\ \ \ \ \ \ \ appears\ inside\ the\ canvas\ will\ be\ visible.\r\n\ \ <li>\ Except\ as\ noted\ in\ the\ APIs,\ all\ methods\ accept\ {@link\ Double\#NaN},\r\n\ \ \ \ \ \ \ {@link\ Double\#POSITIVE_INFINITY},\ and\ {@link\ Double\#NEGATIVE_INFINITY}\r\n\ \ \ \ \ \ \ as\ arugments.\ An\ object\ drawn\ with\ an\ <em>x</em>-\ or\ <em>y</em>-coordinate\r\n\ \ \ \ \ \ \ that\ is\ NaN\ will\ behave\ as\ if\ it\ is\ outside\ the\ canvas,\ and\ will\ not\ be\ visible.\r\n\ \ <li>\ Due\ to\ floating-point\ issues,\ an\ object\ drawn\ with\ an\ <em>x</em>-\ or\r\n\ \ \ \ \ \ \ <em>y</em>-coordinate\ that\ is\ way\ outside\ the\ canvas\ (such\ as\ the\ line\ segment\r\n\ \ \ \ \ \ \ from\ (0.5,\ &infin;)\ to\ (0.5,\ &infin;)\ may\ not\ be\ visible\ even\ in\ the\r\n\ \ \ \ \ \ \ part\ of\ the\ canvas\ where\ it\ should\ be.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ <b>Performance\ tricks.</b>\r\n\ \ Standard\ drawing\ is\ capable\ of\ drawing\ large\ amounts\ of\ data.\r\n\ \ Here\ are\ a\ few\ tricks\ and\ tips\:\r\n\ \ <ul>\r\n\ \ <li>\ Use\ <em>double\ buffering</em>\ for\ static\ drawing\ with\ a\ large\r\n\ \ \ \ \ \ \ number\ of\ objects.\r\n\ \ \ \ \ \ \ That\ is,\ call\ {@link\ \#enableDoubleBuffering()}\ before\r\n\ \ \ \ \ \ \ the\ sequence\ of\ drawing\ commands\ and\ call\ {@link\ \#show()}\ afterwards.\r\n\ \ \ \ \ \ \ Incrementally\ displaying\ a\ complex\ drawing\ while\ it\ is\ being\r\n\ \ \ \ \ \ \ created\ can\ be\ intolerably\ inefficient\ on\ many\ computer\ systems.\r\n\ \ <li>\ When\ drawing\ computer\ animations,\ call\ {@code\ show()}\r\n\ \ \ \ \ \ \ only\ once\ per\ frame,\ not\ after\ drawing\ each\ individual\ object.\r\n\ \ <li>\ If\ you\ call\ {@code\ picture()}\ multiple\ times\ with\ the\ same\ filename,\r\n\ \ \ \ \ \ \ Java\ will\ cache\ the\ image,\ so\ you\ do\ not\ incur\ the\ cost\ of\ reading\r\n\ \ \ \ \ \ \ from\ a\ file\ each\ time.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ <b>Known\ bugs\ and\ issues.</b>\r\n\ \ <ul>\r\n\ \ <li>\ The\ {@code\ picture()}\ methods\ may\ not\ draw\ the\ portion\ of\ the\ image\ that\ is\r\n\ \ \ \ \ \ \ inside\ the\ canvas\ if\ the\ center\ point\ (<em>x</em>,\ <em>y</em>)\ is\ outside\ the\r\n\ \ \ \ \ \ \ canvas.\r\n\ \ \ \ \ \ \ This\ bug\ appears\ only\ on\ some\ systems.\r\n\ \ <li>\ Some\ methods\ may\ not\ draw\ the\ portion\ of\ the\ geometric\ object\ that\ is\ inside\ the\r\n\ \ \ \ \ \ \ canvas\ if\ the\ <em>x</em>-\ or\ <em>y</em>-coordinates\ are\ infinite.\r\n\ \ \ \ \ \ \ This\ bug\ appears\ only\ on\ some\ systems.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ <b>Reference.</b>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://introcs.cs.princeton.edu/15inout">Section\ 1.5</a>\ of\r\n\ \ <em>Computer\ Science\:\ An\ Interdisciplinary\ Approach</em>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=StdDraw()
comment10.params=min\ max
comment10.target=void\ setYscale(double,\ double)
comment10.text=\r\n\ Sets\ the\ <em>y</em>-scale\ to\ the\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>y</em>-scale\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>y</em>-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n
comment11.params=min\ max
comment11.target=void\ setScale(double,\ double)
comment11.text=\r\n\ Sets\ both\ the\ <em>x</em>-scale\ and\ <em>y</em>-scale\ to\ the\ (same)\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>x</em>-\ and\ <em>y</em>-scales\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>x</em>-\ and\ <em>y</em>-scales\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n
comment12.params=x
comment12.target=double\ scaleX(double)
comment13.params=y
comment13.target=double\ scaleY(double)
comment14.params=w
comment14.target=double\ factorX(double)
comment15.params=h
comment15.target=double\ factorY(double)
comment16.params=x
comment16.target=double\ userX(double)
comment17.params=y
comment17.target=double\ userY(double)
comment18.params=
comment18.target=void\ clear()
comment18.text=\r\n\ Clears\ the\ screen\ to\ the\ default\ color\ (white).\r\n
comment19.params=color
comment19.target=void\ clear(java.awt.Color)
comment19.text=\r\n\ Clears\ the\ screen\ to\ the\ specified\ color.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ background\r\n
comment2.params=
comment2.target=void\ setCanvasSize()
comment2.text=\r\n\ Sets\ the\ canvas\ (drawing\ area)\ to\ be\ 512-by-512\ pixels.\r\n\ This\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\r\n\ pen\ radius,\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\r\n\ of\ a\ program.\r\n
comment20.params=
comment20.target=double\ getPenRadius()
comment20.text=\r\n\ Returns\ the\ current\ pen\ radius.\r\n\r\n\ @return\ the\ current\ value\ of\ the\ pen\ radius\r\n
comment21.params=
comment21.target=void\ setPenRadius()
comment21.text=\r\n\ Sets\ the\ pen\ size\ to\ the\ default\ size\ (0.002).\r\n\ The\ pen\ is\ circular,\ so\ that\ lines\ have\ rounded\ ends,\ and\ when\ you\ set\ the\r\n\ pen\ radius\ and\ draw\ a\ point,\ you\ get\ a\ circle\ of\ the\ specified\ radius.\r\n\ The\ pen\ radius\ is\ not\ affected\ by\ coordinate\ scaling.\r\n
comment22.params=radius
comment22.target=void\ setPenRadius(double)
comment22.text=\r\n\ Sets\ the\ radius\ of\ the\ pen\ to\ the\ specified\ size.\r\n\ The\ pen\ is\ circular,\ so\ that\ lines\ have\ rounded\ ends,\ and\ when\ you\ set\ the\r\n\ pen\ radius\ and\ draw\ a\ point,\ you\ get\ a\ circle\ of\ the\ specified\ radius.\r\n\ The\ pen\ radius\ is\ not\ affected\ by\ coordinate\ scaling.\r\n\r\n\ @param\ \ radius\ the\ radius\ of\ the\ pen\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n
comment23.params=
comment23.target=java.awt.Color\ getPenColor()
comment23.text=\r\n\ Returns\ the\ current\ pen\ color.\r\n\r\n\ @return\ the\ current\ pen\ color\r\n
comment24.params=
comment24.target=void\ setPenColor()
comment24.text=\r\n\ Set\ the\ pen\ color\ to\ the\ default\ color\ (black).\r\n
comment25.params=color
comment25.target=void\ setPenColor(java.awt.Color)
comment25.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ specified\ color.\r\n\ <p>\r\n\ The\ predefined\ pen\ colors\ are\r\n\ {@code\ StdDraw.BLACK},\ {@code\ StdDraw.BLUE},\ {@code\ StdDraw.CYAN},\r\n\ {@code\ StdDraw.DARK_GRAY},\ {@code\ StdDraw.GRAY},\ {@code\ StdDraw.GREEN},\r\n\ {@code\ StdDraw.LIGHT_GRAY},\ {@code\ StdDraw.MAGENTA},\ {@code\ StdDraw.ORANGE},\r\n\ {@code\ StdDraw.PINK},\ {@code\ StdDraw.RED},\ {@code\ StdDraw.WHITE},\ and\r\n\ {@code\ StdDraw.YELLOW}.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ pen\r\n
comment26.params=red\ green\ blue
comment26.target=void\ setPenColor(int,\ int,\ int)
comment26.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ specified\ RGB\ color.\r\n\r\n\ @param\ \ red\ the\ amount\ of\ red\ (between\ 0\ and\ 255)\r\n\ @param\ \ green\ the\ amount\ of\ green\ (between\ 0\ and\ 255)\r\n\ @param\ \ blue\ the\ amount\ of\ blue\ (between\ 0\ and\ 255)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ red},\ {@code\ green},\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ blue}\ is\ outside\ its\ prescribed\ range\r\n
comment27.params=
comment27.target=java.awt.Font\ getFont()
comment27.text=\r\n\ Returns\ the\ current\ font.\r\n\r\n\ @return\ the\ current\ font\r\n
comment28.params=
comment28.target=void\ setFont()
comment28.text=\r\n\ Sets\ the\ font\ to\ the\ default\ font\ (sans\ serif,\ 16\ point).\r\n
comment29.params=font
comment29.target=void\ setFont(java.awt.Font)
comment29.text=\r\n\ Sets\ the\ font\ to\ the\ specified\ value.\r\n\r\n\ @param\ font\ the\ font\r\n
comment3.params=canvasWidth\ canvasHeight
comment3.target=void\ setCanvasSize(int,\ int)
comment3.text=\r\n\ Sets\ the\ canvas\ (drawing\ area)\ to\ be\ <em>width</em>-by-<em>height</em>\ pixels.\r\n\ This\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\r\n\ pen\ radius,\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\r\n\ of\ a\ program.\r\n\r\n\ @param\ \ canvasWidth\ the\ width\ as\ a\ number\ of\ pixels\r\n\ @param\ \ canvasHeight\ the\ height\ as\ a\ number\ of\ pixels\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ canvasWidth}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ canvasHeight}\ are\ positive\r\n
comment30.params=x0\ y0\ x1\ y1
comment30.target=void\ line(double,\ double,\ double,\ double)
comment30.text=\r\n\ Draws\ a\ line\ segment\ between\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>)\ and\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>).\r\n\r\n\ @param\ \ x0\ the\ <em>x</em>-coordinate\ of\ one\ endpoint\r\n\ @param\ \ y0\ the\ <em>y</em>-coordinate\ of\ one\ endpoint\r\n\ @param\ \ x1\ the\ <em>x</em>-coordinate\ of\ the\ other\ endpoint\r\n\ @param\ \ y1\ the\ <em>y</em>-coordinate\ of\ the\ other\ endpoint\r\n
comment31.params=x\ y
comment31.target=void\ pixel(double,\ double)
comment31.text=\r\n\ Draws\ one\ pixel\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ This\ method\ is\ private\ because\ pixels\ depend\ on\ the\ display.\r\n\ To\ achieve\ the\ same\ effect,\ set\ the\ pen\ radius\ to\ 0\ and\ call\ {@code\ point()}.\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ pixel\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ pixel\r\n
comment32.params=x\ y
comment32.target=void\ point(double,\ double)
comment32.text=\r\n\ Draws\ a\ point\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ The\ point\ is\ a\ filled\ circle\ whose\ radius\ is\ equal\ to\ the\ pen\ radius.\r\n\ To\ draw\ a\ single-pixel\ point,\ first\ set\ the\ pen\ radius\ to\ 0.\r\n\r\n\ @param\ x\ the\ <em>x</em>-coordinate\ of\ the\ point\r\n\ @param\ y\ the\ <em>y</em>-coordinate\ of\ the\ point\r\n
comment33.params=x\ y\ radius
comment33.target=void\ circle(double,\ double,\ double)
comment33.text=\r\n\ Draws\ a\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n
comment34.params=x\ y\ radius
comment34.target=void\ filledCircle(double,\ double,\ double)
comment34.text=\r\n\ Draws\ a\ filled\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n
comment35.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment35.target=void\ ellipse(double,\ double,\ double,\ double)
comment35.text=\r\n\ Draws\ an\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n
comment36.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment36.target=void\ filledEllipse(double,\ double,\ double,\ double)
comment36.text=\r\n\ Draws\ an\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n
comment37.params=x\ y\ radius\ angle1\ angle2
comment37.target=void\ arc(double,\ double,\ double,\ double,\ double)
comment37.text=\r\n\ Draws\ a\ circular\ arc\ of\ the\ specified\ radius,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ from\ angle1\ to\ angle2\ (in\ degrees).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @param\ \ angle1\ the\ starting\ angle.\ 0\ would\ mean\ an\ arc\ beginning\ at\ 3\ o'clock.\r\n\ @param\ \ angle2\ the\ angle\ at\ the\ end\ of\ the\ arc.\ For\ example,\ if\r\n\ \ \ \ \ \ \ \ \ you\ want\ a\ 90\ degree\ arc,\ then\ angle2\ should\ be\ angle1\ +\ 90.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n
comment38.params=x\ y\ halfLength
comment38.target=void\ square(double,\ double,\ double)
comment38.text=\r\n\ Draws\ a\ square\ of\ side\ length\ 2r,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n
comment39.params=x\ y\ halfLength
comment39.target=void\ filledSquare(double,\ double,\ double)
comment39.text=\r\n\ Draws\ a\ filled\ square\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n
comment4.params=
comment4.target=void\ init()
comment40.params=x\ y\ halfWidth\ halfHeight
comment40.target=void\ rectangle(double,\ double,\ double,\ double)
comment40.text=\r\n\ Draws\ a\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n
comment41.params=x\ y\ halfWidth\ halfHeight
comment41.target=void\ filledRectangle(double,\ double,\ double,\ double)
comment41.text=\r\n\ Draws\ a\ filled\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n
comment42.params=x\ y
comment42.target=void\ polygon(double[],\ double[])
comment42.text=\r\n\ Draws\ a\ polygon\ with\ the\ vertices\ \r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>??1</sub>,\ <em>y</em><sub><em>n</em>??1</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n
comment43.params=x\ y
comment43.target=void\ filledPolygon(double[],\ double[])
comment43.text=\r\n\ Draws\ a\ polygon\ with\ the\ vertices\ \r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>??1</sub>,\ <em>y</em><sub><em>n</em>??1</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n
comment44.params=filename
comment44.target=java.awt.Image\ getImage(java.lang.String)
comment44.text=\r\n\ \ Drawing\ images.\r\n
comment45.params=x\ y\ filename
comment45.target=void\ picture(double,\ double,\ java.lang.String)
comment45.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\t\r\n\ As\ an\ optimization,\ the\ picture\ is\ cached,\ so\ there\ is\ no\ performance\r\n\ penalty\ for\ redrawing\ the\ same\ image\ multiple\ times\ (e.g.,\ in\ an\ animation).\r\n\ However,\ if\ you\ change\ the\ picture\ file\ after\ drawing\ it,\ subsequent\r\n\ calls\ will\ draw\ the\ original\ picture.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment46.params=x\ y\ filename\ degrees
comment46.target=void\ picture(double,\ double,\ java.lang.String,\ double)
comment46.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rotated\ given\ number\ of\ degrees.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment47.params=x\ y\ filename\ scaledWidth\ scaledHeight
comment47.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double)
comment47.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment48.params=x\ y\ filename\ scaledWidth\ scaledHeight\ degrees
comment48.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double,\ double)
comment48.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ rotated\r\n\ given\ number\ of\ degrees,\ and\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ JPEG,\ PNG,\ and\ GIF.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment49.params=x\ y\ text
comment49.target=void\ text(double,\ double,\ java.lang.String)
comment49.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n
comment5.params=
comment5.target=javax.swing.JMenuBar\ createMenuBar()
comment50.params=x\ y\ text\ degrees
comment50.target=void\ text(double,\ double,\ java.lang.String,\ double)
comment50.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>)\ and\r\n\ rotated\ by\ the\ specified\ number\ of\ degrees.\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n
comment51.params=x\ y\ text
comment51.target=void\ textLeft(double,\ double,\ java.lang.String)
comment51.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ left-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\r\n
comment52.params=x\ y\ text
comment52.target=void\ textRight(double,\ double,\ java.lang.String)
comment52.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ right-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n
comment53.params=t
comment53.target=void\ show(int)
comment53.text=\r\n\ Copies\ the\ offscreen\ buffer\ to\ the\ onscreen\ buffer,\ pauses\ for\ t\ milliseconds\r\n\ and\ enables\ double\ buffering.\r\n\ @param\ t\ number\ of\ milliseconds\r\n\ @deprecated\ replaced\ by\ {@link\ \#enableDoubleBuffering()},\ {@link\ \#show()},\ and\ {@link\ \#pause(int\ t)}\r\n
comment54.params=t
comment54.target=void\ pause(int)
comment54.text=\r\n\ Pause\ for\ t\ milliseconds.\ This\ method\ is\ intended\ to\ support\ computer\ animations.\r\n\ @param\ t\ number\ of\ milliseconds\r\n
comment55.params=
comment55.target=void\ show()
comment55.text=\r\n\ Copies\ offscreen\ buffer\ to\ onscreen\ buffer.\ There\ is\ no\ reason\ to\ call\r\n\ this\ method\ unless\ double\ buffering\ is\ enabled.\r\n
comment56.params=
comment56.target=void\ draw()
comment57.params=
comment57.target=void\ enableDoubleBuffering()
comment57.text=\r\n\ Enable\ double\ buffering.\ All\ subsequent\ calls\ to\ \r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ deffered\ until\ the\ next\ call\r\n\ to\ show().\ Useful\ for\ animations.\r\n
comment58.params=
comment58.target=void\ disableDoubleBuffering()
comment58.text=\r\n\ Disable\ double\ buffering.\ All\ subsequent\ calls\ to\ \r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ displayed\ on\ screen\ when\ called.\r\n\ This\ is\ the\ default.\r\n
comment59.params=filename
comment59.target=void\ save(java.lang.String)
comment59.text=\r\n\ Saves\ the\ drawing\ to\ using\ the\ specified\ filename.\r\n\ The\ supported\ image\ formats\ are\ JPEG\ and\ PNG;\r\n\ the\ filename\ suffix\ must\ be\ {@code\ .jpg}\ or\ {@code\ .png}.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ with\ one\ of\ the\ required\ suffixes\r\n
comment6.params=
comment6.target=void\ setXscale()
comment6.text=\r\n\ Sets\ the\ <em>x</em>-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment60.params=e
comment60.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment60.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment61.params=
comment61.target=boolean\ isMousePressed()
comment61.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\ {@code\ false}\ otherwise\r\n
comment62.params=
comment62.target=boolean\ mousePressed()
comment62.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\ {@code\ false}\ otherwise\r\n\ @deprecated\ replaced\ by\ {@link\ \#isMousePressed()}\r\n
comment63.params=
comment63.target=double\ mouseX()
comment63.text=\r\n\ Returns\ the\ <em>x</em>-coordinate\ of\ the\ mouse.\r\n\r\n\ @return\ the\ <em>x</em>-coordinate\ of\ the\ mouse\r\n
comment64.params=
comment64.target=double\ mouseY()
comment64.text=\r\n\ Returns\ the\ <em>y</em>-coordinate\ of\ the\ mouse.\r\n\r\n\ @return\ <em>y</em>-coordinate\ of\ the\ mouse\r\n
comment65.params=e
comment65.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment65.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment66.params=e
comment66.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment66.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment67.params=e
comment67.target=void\ mouseExited(java.awt.event.MouseEvent)
comment67.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment68.params=e
comment68.target=void\ mousePressed(java.awt.event.MouseEvent)
comment68.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment69.params=e
comment69.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment69.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment7.params=
comment7.target=void\ setYscale()
comment7.text=\r\n\ Sets\ the\ <em>y</em>-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment70.params=e
comment70.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment70.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment71.params=e
comment71.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment71.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment72.params=
comment72.target=boolean\ hasNextKeyTyped()
comment72.text=\r\n\ Returns\ true\ if\ the\ user\ has\ typed\ a\ key\ (that\ has\ not\ yet\ been\ processed).\r\n\r\n\ @return\ {@code\ true}\ if\ the\ user\ has\ typed\ a\ key\ (that\ has\ not\ yet\ been\ processed\r\n\ \ \ \ \ \ \ \ \ by\ {@link\ \#nextKeyTyped()};\ {@code\ false}\ otherwise\r\n
comment73.params=
comment73.target=char\ nextKeyTyped()
comment73.text=\r\n\ Returns\ the\ next\ key\ that\ was\ typed\ by\ the\ user\ (that\ your\ program\ has\ not\ already\ processed).\r\n\ This\ method\ should\ be\ preceded\ by\ a\ call\ to\ {@link\ \#hasNextKeyTyped()}\ to\ ensure\r\n\ that\ there\ is\ a\ next\ key\ to\ process.\r\n\ This\ method\ returns\ a\ Unicode\ character\ corresponding\ to\ the\ key\r\n\ typed\ (such\ as\ {@code\ 'a'}\ or\ {@code\ 'A'}).\r\n\ It\ cannot\ identify\ action\ keys\ (such\ as\ F1\ and\ arrow\ keys)\r\n\ or\ modifier\ keys\ (such\ as\ control).\r\n\r\n\ @return\ the\ next\ key\ typed\ by\ the\ user\ (that\ your\ program\ has\ not\ already\ processed).\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ remaining\ key\r\n
comment74.params=keycode
comment74.target=boolean\ isKeyPressed(int)
comment74.text=\r\n\ Returns\ true\ if\ the\ given\ key\ is\ being\ pressed.\r\n\ <p>\r\n\ This\ method\ takes\ the\ keycode\ (corresponding\ to\ a\ physical\ key)\r\n\ \ as\ an\ argument.\ It\ can\ handle\ action\ keys\r\n\ (such\ as\ F1\ and\ arrow\ keys)\ and\ modifier\ keys\ (such\ as\ shift\ and\ control).\r\n\ See\ {@link\ KeyEvent}\ for\ a\ description\ of\ key\ codes.\r\n\r\n\ @param\ \ keycode\ the\ key\ to\ check\ if\ it\ is\ being\ pressed\r\n\ @return\ {@code\ true}\ if\ {@code\ keycode}\ is\ currently\ being\ pressed;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment75.params=e
comment75.target=void\ keyTyped(java.awt.event.KeyEvent)
comment75.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment76.params=e
comment76.target=void\ keyPressed(java.awt.event.KeyEvent)
comment76.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment77.params=e
comment77.target=void\ keyReleased(java.awt.event.KeyEvent)
comment77.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment78.params=args
comment78.target=void\ main(java.lang.String[])
comment78.text=\r\n\ Test\ client.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment8.params=
comment8.target=void\ setScale()
comment8.text=\r\n\ Sets\ the\ <em>x</em>-scale\ and\ <em>y</em>-scale\ to\ be\ the\ default\r\n\ (between\ 0.0\ and\ 1.0).\r\n
comment9.params=min\ max
comment9.target=void\ setXscale(double,\ double)
comment9.text=\r\n\ Sets\ the\ <em>x</em>-scale\ to\ the\ specified\ range.\r\n\r\n\ @param\ \ min\ the\ minimum\ value\ of\ the\ <em>x</em>-scale\r\n\ @param\ \ max\ the\ maximum\ value\ of\ the\ <em>x</em>-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n
numComments=79
